name: Terraform Apply

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        default: 'development'
        description: 'Environment for the deployment (development, staging, production)'
      region:
        required: false
        type: string
        default: 'us-east-1'
        description: 'AWS region for the deployment'
      working-directory:
        required: false
        type: string
        default: ./terraform
        description: 'Working directory for Terraform configuration files'
      tf-version:
        required: false
        type: string
        default: '1.12.1'
        description: 'Terraform version to use'
      tf-vars-override:
        required: false
        type: string
        default: ''
        description: 'Optional: Override default var file (use with caution)'
    secrets:
      oidc_role:
        required: true
        type: string
      github_token:
        required: true
        type: string
      # aws_access_key:
      #   required: false
      # aws_secret_access_key:
      #   required: false

jobs:
  terraform-apply:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.oidc_role }}
        aws-region: ${{ inputs.region }}

    - name: Validate Environment
      run: |
        VALID_ENVS=("development" "staging" "production")
        if [[ ! "${VALID_ENVS[@]}" =~ "${{ inputs.environment }}" ]]; then
          echo "Invalid environment. Must be one of: ${VALID_ENVS[*]}"
          exit 1
        fi

    - name: Set Variables File
      id: set-vars-file
      run: |
        if [[ -n "${{ inputs.tf-vars-override }}" ]]; then
          VARS_FILE="${{ inputs.tf-vars-override }}"
          echo "Using variables file: $VARS_FILE"
        else
          VARS_FILE="terraform.tfvars.${{ inputs.environment }}"
          echo "Using default variables file: $VARS_FILE"
        fi

        if [[ -f "$VARS_FILE" ]]; then
          echo "Error: Variables file not found."
          exit 1
        fi

        echo "vars-file=$VARS_FILE" >> $GITHUB_OUTPUT

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -input=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan (using variables file)
      id: plan
      run: terraform plan -var-file=${{ steps.outputs.set-vars-file.outputs.vars-file }} -out=tfplan
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        echo "Terraform Plan failed."
        exit 1

    - name: Terraform Apply
      id: apply
      run: |
        if terraform apply -var-file=${{ inputs.tf-vars-file }} -auto-approve tfplan | tee apply_output.txt; then
          echo "apply_status=success" >> $GITHUB_OUTPUT
        else
          echo "apply_status=failure" >> $GITHUB_OUTPUT
        fi

    - name: Process Apply Output
      id: apply-output
      run: |
        SUMMARY=$(sed -n '/Outputs:/,$p' apply_output.txt)
        SUMMARY="${SUMMARY//'%'/'%25'}"
        SUMMARY="${SUMMARY//$'\n'/'%0A'}"
        SUMMARY="${SUMMARY//$'\r'/'%0D'}"
        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

    - name: Create Github Commit Comment
      uses: actions/github-script@v6
      env:
        SUMMARY: ${{ steps.apply-output.outputs.summary }}
      with:
        github-token: ${{ secrets.github_token }}
        script: |
          const summary = process.env.SUMMARY;
          const status = '${{ steps.apply.outputs.apply_status }}' === 'success'? '✅ Success' : '❌ Failure';

          github.rest.repo.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `### Terraform Apply: ${status}

            <details><summary>Show Apply Summary</summary>

            \`\`\`
            ${summary}
            \`\`\`
            </details>`
          })

    - name: Check Terraform Apply Status
      if: steps.apply.outputs.apply_status != 'success'
      run: |
        echo "Terraform Apply failed. Please check the commit comment for details."
        exit 1

