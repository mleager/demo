name: Terraform Apply

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: 'Working directory for Terraform configuration files'
      tf-version:
        required: false
        type: string
        default: '1.12.1'
        description: 'Terraform version to use'
      tf-vars-file:
        required: false
        type: string
        default: 'terraform.tfvars.development'
        description: 'Terraform variables file'
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  terraform:
    name: 'Terraform Apply'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init -input=false

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: terraform plan -var-file=${{ inputs.tf-vars-file }} -out=tfplan
      continue-on-error: true

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: |
        echo "Terraform Plan failed."
        exit 1

    - name: Terraform Apply
      id: apply
      run: terraform apply -var-file=${{ inputs.tf-vars-file }} -auto-approve tfplan | tee apply_output.txt

    - name: Process Apply Output
      id: apply-output
      run: |
        SUMMARY=$(sed -n '/Outputs:/,$p' apply_output.txt)
        SUMMARY="${SUMMARY//'%'/'%25'}"
        SUMMARY="${SUMMARY//$'\n'/'%0A'}"
        SUMMARY="${SUMMARY//$'\r'/'%0D'}"
        echo "summary=$SUMMARY" >> $GITHUB_OUTPUT

    - name: Create Github Commit Comment
      uses: actions/github-script@v6
      with:
        script: |
          const summary = process.env.SUMMARY;
          const status = '${{ steps.apply.outcome }}' === 'success'? '✅ Success' : '❌ Failure';

          github.rest.repo.createCommitComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            commit_sha: context.sha,
            body: `### Terraform Apply: ${status}

            <details><summary>Show Apply Summary</summary>

            \`\`\`
            ${summary}
            \`\`\`
            </details>`
          })
        # env:
        #   SUMMARY: ${{ steps.apply-output.outputs.summary }}

    - name: Check Terraform Apply Status
      if: steps.apply.outcome != 'success'
      run: |
        echo "Terraform Apply failed. Please check the commit comment for details."
        exit 1

