name: Terraform Plan

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
        description: "Path to the Terraform directory."
      tf-version:
        required: false
        type: string
        default: '1.12.1'
        description: "Terraform version to use."
      tf-vars-file:
        required: false
        type: string
        default: 'terraform.tfvars.development'
        description: "Path to the Terraform variables file."
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -var-file=${{ inputs.tf-vars-file }} -out=tfplan
      continue-on-error: true

    - name: Get Plan Output
      id: plan-output
      run: |
        PLAN_OUTPUT=$(terraform show -no-color tfplan)
        PLAN_OUTPUT="${PLAN_OUTPUT//'%'/'%25'}"
        PLAN_OUTPUT="${PLAN_OUTPUT//$'\n'/'%0A'}"
        PLAN_OUTPUT="${PLAN_OUTPUT//$'\r'/'%0D'}"
        echo "::set-output name=plan::$PLAN_OUTPUT"

    - name: Update PR
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan-output.outputs.plan }}"
      with:
        # github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // Get existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          // Find any existing bot comments
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Output')
          });

          // Prepare the output
          const output = `### Terraform Plan Output

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`
          </details>`;

          if (botComment) {
            // Update existing comment
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            // Create new comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

