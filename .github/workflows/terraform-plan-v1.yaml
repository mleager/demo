name: Terraform Plan

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        default: 'development'
        description: "Environment for which the plan is being generated. (development, staging, production)"
      region:
        required: false
        type: string
        default: 'us-east-1'
        description: "AWS region for the deployment"
      working-directory:
        required: false
        type: string
        default: './terraform'
        description: "Path to the Terraform directory"
      tf-version:
        required: false
        type: string
        default: '1.12.1'
        description: "Terraform version to use"
      tf-vars-override:
        required: false
        type: string
        default: ''
        description: "Optional: Override default var file (use with caution)"
      make_comment:
        required: false
        type: boolean
        default: true
        description: "Show Terraform Plan Output as a Commit Comment. Defaults to true. Requires github_token"

    secrets:
      oidc_role:
        required: true
        type: string
      github_token:
        required: false
        type: string

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    defaults:
      run:
        working-directory: ${{ inputs.working-directory }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: ${{ inputs.tf-version }}

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.oidc_role }}
        aws-region: ${{ inputs.region }}

    - name: Validate Environment
      run: |
        VALID_ENVS=("development" "staging" "production")
        if [[ ! "${VALID_ENVS[@]}" =~ "${{ inputs.environment }}" ]]; then
          echo "Invalid environment. Valid environments are: ${VALID_ENVS[*]}"
          exit 1
        fi

    - name: Set Variables File
      id: set-vars-file
      run: |
        if [[ -n "${{ inputs.tf-vars-override }}" ]]; then
          VARS_FILE="${{ inputs.tf-vars-override }}"
          echo "Using override variables file: $VARS_FILE"
        else
          VARS_FILE="terraform.tfvars.${{ inputs.environment }}"
          echo "Using default variables file: $VARS_FILE"
        fi

        if [[ -f "$VARS_FILE" ]]; then
          echo "Error: Variables file not found."
          exit 1
        fi

        echo "vars-file=$VARS_FILE" >> $GITHUB_OUTPUT

    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      run: terraform plan -var-file=${{ steps.set-vars-file.outputs.vars-file }} -out=tfplan
      continue-on-error: true

    - name: Get Plan Output
      id: plan-output
      run: |
        PLAN_OUTPUT=$(terraform show -no-color tfplan)
        PLAN_OUTPUT="${PLAN_OUTPUT//'%'/'%25'}"
        PLAN_OUTPUT="${PLAN_OUTPUT//$'\n'/'%0A'}"
        PLAN_OUTPUT="${PLAN_OUTPUT//$'\r'/'%0D'}"
        echo "name=$PLAN_OUTPUT" >> $GITHUB_OUTPUT

    - name: Update PR
      if: inputs.github_token != '' || inputs.make_comment != false
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan-output.outputs.plan }}"
      with:
        github-token: ${{ secrets.github_token }}
        script: |
          // Get existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          // Find any existing bot comments
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Output')
          });

          // Prepare the output
          const output = `### Terraform Plan Output

          <details><summary>Show Plan</summary>

          \`\`\`${process.env.PLAN}\`\`\`
          </details>`;

          if (botComment) {
            // Update existing comment
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            // Create new comment
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

